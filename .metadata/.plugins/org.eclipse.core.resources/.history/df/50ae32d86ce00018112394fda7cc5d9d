#include <bits/stdc++.h>

using namespace std;
vector<int> parent;
map<int, vector<pair<int, int>>> graph;
map<pair<int, int>, int> weights;

vector<int> Dijkstra(int T, pair<int, int> avoid){
	priority_queue<pair<int, int>> pq;
	vector<int> distance (T + 1, 1076000);

	for(int i = 0; i < T; i++){
		parent.push_back(i);
	}

	pq.push(make_pair(0, 0));
	distance[0] = 0;

	while(!pq.empty()){
		pair<int, int> front = pq.top();
		pq.pop();

		if(front.first * -1 > distance[front.second]) continue;

		for(auto n : graph[front.second]){
			if(distance[front.second] + n.second < distance[n.first] && make_pair(front.second, n.first) != avoid){
				distance[n.first] = distance[front.second] + n.second;
				pq.push(make_pair(distance[n.first] * -1, n.first));
				parent[n.first] = front.second;

				for(int i = 0; i < (int) parent.size(); i++){
					cout << parent[i] << " ";
				}

				cout << endl;
			}
		}
	}

	return distance;
}

vector<pair<int, int>> make_vector(){
	int index = 0;
	vector<pair<int, int>> answer;

	while(parent[index] != index){
		answer.push_back(make_pair(index, parent[index]));
		index = parent[index];
	}

	return answer;
}

vector<int> make_weights(vector<pair<int, int>> connections){
	vector<int> paths;

	for(int i = 0; i < (int) connections.size(); i++){
		paths.push_back(weights[connections[i]]);
	}

	return paths;
}

int main() {
	int N, M;
	cin >> N >> M;

	for(int i = 0; i < N;  i++){
		graph.insert(make_pair(i, vector<pair<int, int>> ()));
	}

	for(int i = 0; i < M; i++){
		int start, end, weight;
		cin >> start >> end >> weight;
		graph[start - 1].push_back(make_pair(end - 1, weight));
		weights.insert(make_pair(make_pair(start - 1, end - 1), weight));
	}

	auto distance = Dijkstra(N, make_pair(-1, -1));
	auto connections = make_vector();
	auto paths = make_weights(connections);
	int maximum = 0;

	for(int i = 1; i < (int) paths.size(); i++){
		if(paths[maximum] < paths[i]){
			maximum = i;
		}
	}

	auto secondDistance = Dijkstra(N, connections[maximum]);
	cout << secondDistance[N - 1] - distance[N - 1] << endl;

	return 0;
}
