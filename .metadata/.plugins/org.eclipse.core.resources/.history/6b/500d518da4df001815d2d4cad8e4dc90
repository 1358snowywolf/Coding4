#include <bits/stdc++.h>

using namespace std;
vector<int> parents;
int total = 0;

int findParents(int u){
	return ((parents[u] == u) ? u : (parents[u] = findParents(u)));
}

void connect(int u, int v){
	int x = findParents(u);
	int y = findParents(v);

	parents[x] = y;
}

void Krushal(vector<tuple<int, int, int>> edges, int i){
	for(int j = 0; j < (int) edges.size(); j++){
		if(i == j){
			continue;
		}

		int weight, u, v;
		tie(weight, u, v) = edges[j];

		if(findParents(u) != findParents(v)){
			connect(u, v);
			total += weight;
		}
	}
}

int main() {
	int C;
	cin >> C;

	for(int times = 0; times < C; times++){
		total = 0;
		parents.clear();
		vector<tuple<int, int, int>> edge;

		int N, M;
		cin >> N >> M;

		for(int i = 0; i < N; i++){
			parents.push_back(i);
		}

		for(int i = 0; i < M; i++){
			int start, end, weight;
			cin >> start >> end >> weight;
			edge.push_back(make_tuple(weight, start - 1, end - 1));
		}

		sort(edge.begin(), edge.end());
		Krushal(edge, -1);

		cout << total << " ";
		int maximum = 0;

		for(int i = 0; i < (int) edge.size(); i++){
			total = 0;
			Krushal(edge, i);
			maximum = max(maximum, total);
		}

		cout << maximum << endl;
	}
	return 0;
}
