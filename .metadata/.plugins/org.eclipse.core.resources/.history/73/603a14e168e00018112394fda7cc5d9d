#include <bits/stdc++.h>

using namespace std;
vector<int> parent;
map<int, vector<pair<int, int>>> graph;

void Dijkstra(int T){
	priority_queue<pair<int, int>> pq;
	vector<int> distance (T + 1, 1076000);

	for(int i = 0; i < T; i++){
		parent.push_back(i);
	}

	pq.push(make_pair(0, 0));
	distance[0] = 0;

	while(!pq.empty()){
		pair<int, int> front = pq.top();
		pq.pop();

		if(front.first * -1 > distance[front.second]) continue;

		for(auto n : graph[front.second]){
			if(distance[front.second] + n.second < distance[n.first]){
				distance[n.first] = distance[front.second] + n.second;
				pq.push(make_pair(distance[n.first] * -1, n.first));
				parent[n.second] = front.second;
			}
		}
	}
}

int main() {
	int N, M;
	cin >> N >> M;

	for(int i = 0; i < N;  i++){

	}

	for(int i = 0; i < M; i++){

	}

	return 0;
}
