#include <bits/stdc++.h>

using namespace std;
vector<tuple<int, int, int>> skylines;
set<pair<int, int>> rights, height;
vector<pair<int, int>> answers;
int currentHeight = 0;

void helper(int l){
	while(!rights.empty() && rights.begin()->first < l){
		height.erase(height.find(make_pair(rights.begin()->second, rights.begin()->first)));
		int X = rights.begin()->first;
		rights.erase(rights.begin());
		int newHeight;

		if(height.empty()){
			newHeight = 0;
		}
		else{
			newHeight = height.rbegin()->first;
		}

		if(newHeight != currentHeight){
			answers.push_back(make_pair(X, newHeight));
			currentHeight = newHeight;
		}
	}
}

int main() {
	int N, M, K;

	while(true){
		cin >> N >> M >> K;
		if (cin.eof()){break;}

		skylines.push_back(make_tuple(N, M, K));
	}

	sort(skylines.begin(), skylines.end());

	for(auto S : skylines){
		int l, h, r;
		tie(l, h, r) = S;
		helper(l);

		height.insert(make_pair(h, r));
		rights.insert(make_pair(r, h));
		int newHeight = height.rbegin()->first;

		if(newHeight != currentHeight){
			answers.push_back(make_pair(l, newHeight));
			currentHeight = newHeight;
		}
	}

	helper(INT_MAX);

	for(int i = 0; i < (int) answers.size() - 1; i++){
		cout << answers[i].first << " " << answers[i].second << " ";
	}

	cout << answers[answers.size() - 1].first << " " << answers[answers.size() - 1].second << endl;

	return 0;
}
