#include <bits/stdc++.h>

using namespace std;

int findMin(vector<pair<string, int>> descending, string str){
	for(int i = 0; i < (int) descending.size(); i++){
		if(str[0] < descending[i].first[0]){
			return i;
		}
		else if(str[0] == descending[i].first[0]){
			int index = 0;

			while(str[index] == descending[i].first[index]){
				index++;
			}

			if(str[index] < descending[i].first[index]){
				return i;
			}
		}
	}

	return (int) descending.size() - 1;
}

int findMax(vector<pair<string, int>> ascending, string str){
	for(int i = 0; i < (int) ascending.size(); i++){
		if(str[0] > ascending[i].first[0]){
			return i;
		}
		else if(str[0] == ascending[i].first[0]){
			int index = 0;

			while(str[index] == ascending[i].first[index]){
				index++;
			}

			if(str[index] > ascending[i].first[index]){
				return i;
			}
		}
	}

	return (int) ascending.size() - 1;
}

int main() {
	int N;
	cin >> N;
	vector<pair<string, int>> ascending;
	vector<pair<string, int>> descending;

	for(int i = 0; i < N; i++){
		string str;
		cin >> str;
		auto str2 = str;
		sort(str.begin(), str.end());
		sort(str2.rbegin(), str2.rend());

		ascending.push_back(make_pair(str, i));
		descending.push_back(make_pair(str2, i));
	}

	sort(ascending.begin(), ascending.end());
	sort(descending. begin(), descending.end());
	vector<pair<int, int>> answers (N, make_pair(0, 0));

	for(int i = 0; i < N; i++){
		int index = findMin(descending, ascending[i].first);
		answers[ascending[i].second].first = index;

		index = findMax(ascending, descending[i].first);
		answers[descending[i].second].second = index;
	}

	for(int i = 0; i < (int) answers.size(); i++){
		cout << answers[i].first << " " << answers[i].second << endl;
	}

	return 0;
}
